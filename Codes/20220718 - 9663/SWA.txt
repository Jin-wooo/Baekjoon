<BarkingDog님의 알고리즘 강의로 풀게 된 문제>
https://www.acmicpc.net/problem/9663

18년도 수치해석 과목에서 과제로 나왔었던 문제...
까지는 기억이 난다.
문제를 풀 때는 어떻게 풀었는지를 보면 답을 알게 될 수도 있어서 보지 않았지만, 지금 보니 보드 자체를 queue에 넣어서 BFS, DFS를 구현하는 식으로 풀었던 것 같다. 이 때는 알고리즘에 대한 감이 전혀 없기도 했고, 아마 교수님이 이렇게 풀라고 했던 것 같기도 하다.

여튼 그런 기억만 존재하고 실질적으로 어떻게 풀지는 잘 모르는 상황에서 문제를 보니, 어떻게 풀지는 감이 왔으나 백트래킹을 통해 퀸을 두는 자리가 다른 퀸이 간섭할 수 없는 자리라는 걸 어떻게 알 수 있을지가 문제였다.

정말 쉽고 간결한 방법은 깡으로 for문을 돌리는 방법이다.
↖↑↗. 이 세 방향에 대해서 for문을 돌린다면 파악이 가능하긴 하겠지만,
알다시피 그건 정말 귀찮은 일일 것이다. Y가 2, 3정도면 for문이 10 이하로 돌겠지만, n이 15에 Y가 한 13쯤 되면 그만큼 돌리기도 지칠 것이다. 근데 한두번 돌리는 게 아니라 모든 경우의 수를 탐색하는 백트래킹이니까 더더욱 심각할 거고. 
(저 방향으로만 돌려도 되는 이유는, 이 문제에서 퀸은 X, Y축 기준으로 딱 하나씩만 들어갈 수 있다. Y축 기준 배치를 우선시한다면 위에서 아래로 내려가면서 퀸을 배치하게 되므로 저  세 방향만 신경쓰면 된다.)

내 머리는 딱 for문 수준에서 정지하다시피 하고있었다. 
그래서 BarkingDog님의 강의를 쪼금만 더 보고 힌트를 얻기로 했다.
그 때 알게 되었다. X축도, 대각선 배열도 전부 다 쓰였는지 아닌지를 체크할 수 있는 배열을 만들면 쉽게 문제를 풀 수 있다는 것을.
이러면 심지어 2차원 배열을 만들어서 위치를 체크하지 않아도 된다. 이러면 배열 범위를 넘어가는 것도 걱정할 필요 없고...나쁜 점이 뭔지 잘 모를만큼 좋아진다.
(물론 디버깅하거나 상황 체크를 할 때는 있는게 좋더라)

이전의 문제에서 수열을 체크하는 배열을 조금만 더 빨리 떠올렸다면, 이렇게 고생하지는 않았을 텐데. 솔직히 말하자면 양심에 찔린다. 이 힌트가 너무 결정적이라 사실상 답지 다 보고 한 거나 마찬가지니까.
이전 문제에서 사용했던 '수열을 구성할 때 어느 숫자가 쓰였는지를 바로 파악할 수 있게 bool 배열을 만든다'는 아이디어와 그게 대각선에도 충분히 적용 가능하다는 발상. 이 발상을 떠올리기만 하면 그자리에서 바로 해결할 수 있는 수준의 문제였다.

솔직히 좌표값만 넣어서 바로 대각선이 사용 가능한지를 파악하는 배열을 생각하는 게 쉽지 않다고 생각한다. 내가 너무 고정관념에 사로잡혀있었나 하는 생각도 들고... 일단은 알고리즘 대회 연습이라기 보다는 공부가 목적이었으니 너무 싸매지는 않기로 했다. 

여튼 이 문제는 BarkingDog님의 강의를 듣고 힌트를 얻었고, 그 힌트를 분석해보니 사실상 답을 도출해주는 힌트였으니.... 이 문제는 SWA로 기록했다. 다만 다음에 또 푼다고 해서 도움이 될지는 모르겠다. 원리를 한 번 깨달으면 구현은 문제가 아닌거같거든.



오늘도 main보다는 재귀함수인 queens만 설명할까 한다.
이번 전역 변수도 지난번과 마찬가지로 상태를 공유할 수 있는 변수들이다.
rdlist는 오른쪽 아래로 내려가는 대각선의 상태 체크 배열
ldlist는 왼쪽 아래로 내려가는 대각선의 상태 체크 배열
dlist는 X축 상태 체크 배열이다.
마지막으로 cnt는 퀸을 전부 둔 경우의 갯수.

rd와 ld가 30인 이유는 대각선의 갯수 공식이 2n - 1이고,
그래서 대각선 배열은 암만 커봐야 29정도라서 그냥 30으로 맞췄다.
(대각선은 가로 길이 * 세로 길이 - 1 = n x n - 1 = 2n - 1)

base condition은
qs(지금까지 둔 퀸의 갯수) == n(최대 퀸의 갯수이자 체스판 넓이) 이다.
이 부분에 도달하게 되면 정말로 퀸을 다 둔거라서 전역 변수로 지정한 cnt값이 1 증가한다.

그게 아니라면 for문을 돌려서 qs번째의 퀸을 어디에 둘 건지를 정한다.
여기서 X좌표는 i고, Y좌표는 qs이다.
ld에도 rd에도 d에도 해당 좌표에 맞는 라인들이 쓰이지 않았다면?
그 때는 해당 부분을 전부 true로 만들어버리고 queens를 재귀호출한다.
퀸을 하나 추가한 거니까 qs에는 +1을 인자로 주고.



이번에 실수한 것
1. 쉽다고 성급하게 짠거? 정도가 아닐까 싶다.
쉽든 어렵든 신중하게 하자. 되도않는 걸로 오류가 좀 났었으니까.


<참조>
대각선 갯수 공식 = 2n - 1
↗ = x + y | 반대로 하면 (2n - 1) - (x + y)가 됨.
↖ = (n - 1) - (y - x)