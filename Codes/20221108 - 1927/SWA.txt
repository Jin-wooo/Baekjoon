<BarkingDog님의 알고리즘 강의로 풀게 된 문제>
https://www.acmicpc.net/problem/1927

최소 힙을 만드는 문제이다.
아. 내가 아는 문제잖아!
난이도도 실버따리겠는데!
도전해볼까!

하다가 진창 깨졌다.
고려해야 할 범위가 생각보다 좀 많았는데, 그런 걸 전혀 신경쓰지 않고 마구잡이로 달려들었다가 좀 시간을 많이 잡아먹었다.



문제는 최소 힙에서 쓰이는 입출력 연산을 만드는 것이다.
최소 힙이니까 입력을 하면 자료구조상에서 가장 작은 숫자가 Root로 와야 하고,
출력이면 가장 작은 수를 출력한 다음 그 숫자를 없애고 정렬해주는 것이다.

사실 이거만 잘 구현해주면 문제 없는데, 뭔가 조급하기도 하고, 꼬이기도 해서 영 제대로 못푼 것 같다. 보통 1문제 = 30분을 잡고 풀 생각으로 시작하는데, 이건 1시간 30분? 정도 걸린듯


<코드 설명>
입출력 함수를 제외하면 정말 별 거 없다.
그냥 입력만 받고, 숫자에 따라 입력인지 출력인지 가려서 실행하기. 그게 끝이다.
핵심은 입출력 함수의 완벽한 구현이지.

입력의 경우 input이라는 함수가 담당한다.
그렇게 복잡하진 않다. 우선 입력받은 수를 그냥 배열 minHeap에 추가한다.
그럼 맨 뒤에 가 있을 텐데, 이 숫자를 내 인덱스 / 2와 계속 비교하면서 끌어올리면 된다. 나보다 작은 애가 내 인덱스 / 2에 있을 때까지.

출력은 살짝 복잡한데, 우선은 맨 위, 즉 1번 인덱스에 있는 애를 출력하면 된다.
문제는 그 이후 해당 숫자를 제거하는 건데, 나의 경우 minHeap[1]에 맨 끝 수를 복사한 다음 그대로 맨 뒤 숫자를 remove로 날렸다.

이후 현재 위치를 표현할 nowIdx, 그 2배를 표현하는 swapIdx, 그리고 진짜로 이동할 tarIdx를 세팅해서 작업을 한다.
(사실 지금 생각해보면, swapIdx라는 건 굳이 쓸 필요 없이 nowIdx * 2로만 했으면 되었을텐데, 그 *2가 쓰기 싫었는지 계속 쓰는 것 같다.)
while문은 범위를 벗어났는지 아닌지를 보는 거고, (하단의 노드가 존재하지 않는다면 사이즈보다 swapIdx가 커진다)
그 밑의 if문은 노드가 하나인지 두 개인지 판단하는 부분이다.

노드가 하나면 우리가 그려서 보는 기준 왼쪽에만 존재하는 것이고(힙은 왼쪽부터 쌓이니까), 노드가 두 개면 양쪽에 다 있는 거니까 양쪽 중에서 작은 부분을 골라 tarIdx에 저장한다.

마지막으로 tarIdx가 nowIdx에 있는 나와 바꿀만큼 작은지 판단하고, 바꾼다.
이걸 안 해주면 사실은 바꾸지 않아도 되는데 그냥 바뀌는 경우가 생긴다.
나는 이 간단한 걸 안해줘서 2번쯤 틀렸다.


<주의사항>
이번 문제는 힙의 위치를 계속 변경해줘야 하므로, 지속적으로 힙의 인덱스 부분을 변경해줘야 하고, 언제, 어디서 위치를 이동하는 반복문을 끊어버릴지를 확실하게 정해줘야 한다.


<제출>
첫 제출에선 입력도 출력도 괴상하게 만들었었다.
그래서 여기선 우선 입력부터 고쳤던 것 같다. 현재 위치를 표현하는 부분이 전혀 변경되질 않아서 입력이 꼬였었다.

두 번째 제출에서는 출력도 뭔가 이상하다는 걸 알게 되었다.
그러고보니 크기 비교를 안 했네?

그 부분을 고치고 나니 바로 정답이 떴다.



<이번 문제를 풀면서 실수한 점>
조급해하지 말자.
머리가 안 돌아가면 단 걸 먹자.


<예제>
15
0
13
24
16
19
9
12
3
1
0
0
0
1
4
0


6
1
1
2
0
0
0