<BarkingDog님의 알고리즘 강의로 풀게 된 문제>
https://www.acmicpc.net/problem/6064

문제를 읽어봤을 때는 되게 복잡하지만, 결국 문제의 핵심은 <M:N>이 되는 해는 M과 N의 최소공배수라는 점과 문제의 답이 M으로 나눴을 때 x가 남고, N으로 나눴을 때 y가 남는 숫자를 찾아야 한다는 점이다.

사실 M으로 나눴을 때 x가 남는 숫자들을 N으로 나눠서 나머지가 y인지 아닌지만 확인하면 문제가 풀린다.


<코드 설명>
이번 문제는 첫 입력의 수만큼 예제가 등장하기 때문에, rep으로 해당 숫자를 받은 다음 repeat를 통해 문제를 반복해서 해결하는 방식으로 구현했다. C++일 때는 for문으로 이랬던 것 같다.

repeat 블럭의 초반에는 입력들을 변수에 정리해준다.  ----1
이후 LCM을 구하고, ans는 그냥 출력해도 괜찮도록 -1을 해준 다음,
이전 계산에 쓰였을지도 모르니 mYearArray를 초기화하고 계산을 진행한다.

첫 for문에서 배열에 M으로 나눠서 x가 남는 숫자들을 담아준다. ----2
그리고 수열에 0이 있으면 빼버린다. ----3
이후로는 배열에 담은 숫자들을 N으로 나눠서 나머지가 y인지 확인하고, 그런 수가 하나 걸리면 바로 그 숫자를 ans에 담은 다음 break를 한다.
이후론 바로 bw에 해당 숫자를 기록한다. break로 나오지 않고 for문을 다 돌았다면 그 <x, y>는 존재할 수 없는 숫자라는 뜻이고, 그러면 그냥 ans를 출력하기만 하면 된다. ans는 이미 -1이기 때문이다.




<주의사항>
1. 이 때 M == x면 x = 0, N == y면 y = 0을 해뒀다. 이렇게 한 이유는, 나중에 M과 N이 필요한 순간에 말이 꼬이기 때문이다. 우리는 결국 M과 N으로 나눠서 나머지를 체크해야 하는데, 0으로 해 주지 않으면 M으로 나눠서 나머지가 M인 숫자같은 개소리가 나오기 때문이다. 예를 들어 M = x = 10, N = y = 12라면, 이후 나올 34번째 문장인

for (i in x..numLcm step M)

해당 문장에서 x부터 시작해서 M씩 건너는 문장이 10부터 시작해서 두 수의 곱 + 10같은 숫자가 나오고, 41번째 줄인

if (iter % N == y)

이 문장은 무려 12로 나눠서 나머지가 12인 괴랄한 코드가 되어버린다.
그러니 이 부분에는 꼭 처리가 필요하다.



2. M, x와 N, y 중 어느 한 쪽의 조건을 맞추기 위해서 나머지를 가진 배수를 만들었던 부분이 있었는데, 아마 그 부분을 효율적으로 푼 사람들은 M과 N의 최소공배수를 제한으로 두었을 것이다.
하지만 M * N으로도 충분히 시간 내에 통과되긴 한다. 나는 이래서 괜히 LCM을 만들었던가 싶었는데, barkingDog님은 이 부분도 예상하고 생각해보라는 말을 남겼었다.
이 부분에 대한 힌트는 LCM(M, N)을 구하는 것이 결국 M * N정도의 시간 복잡도를 가지게 된다는 점이었다. 암튼 정답을 이야기하자면....

최소공배수가 M * N보다 작다면 : 어차피 LCM에서 시간 복잡도가 N * M이었으므로 시간이 동일해진다.

최소공배수 = M * N : 둘이 같은 말이 되어버림. 시간이 동일해진다.

이래서 LCM을 쓰든 M * N을 쓰든 대충 시간 복잡도가 비슷해진다. 



3. 1과 이어지는 건데, 여기서 걸린다는 말은 x = y = 0인 상태이므로 만약 0이 들어가면 41번째 줄에서 나머지가 0인 숫자에 0이 걸린다. 그래서 이 부분을 처리해둔 것.

 







<이번 문제에서 실수한 것>
1. 코드를 이 글을 쓰면서 계속 보고 있는데, 그냥 보면 볼수록 뭔가 쓸데없이 복잡하게 짠 것 같은 느낌이 든다. 개선이 필요한 듯?

예를 들어 for문을 두 개나 쓸 필요 없이 앞쪽 for문으로 전부 해결 가능한 코드라는 것을 한참 뒤에 제출하고나서야 발견했기 때문에, 이 부분은 굳이 수정치 않고 이렇게 기록으로만 남겨두겠음.




<예제>
아래는 내가 사용했었던 예제들이다.
일반적인 값들은 물론, 제일 시작 값과 끝 값들도 포함되어 있다.

Ques : 
7
10 12 3 9
10 12 7 2
13 11 5 6
24 31 15 22
40000 40000 40000 40000
1 1 1 1
10 12 10 12

Ans : 
33
-1
83
735
40000
1
60