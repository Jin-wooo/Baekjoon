#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>

#define Y first
#define X second

using namespace std;

int main(void) {

	// 입력 고속화
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int N, M, chickDist = 9999, tmpDist, tmpChickDist = 0;
	int city[50][50] = { 0, };
	vector<pair<int, int>> vecChick;
	vector<pair<int, int>> vecHome;

	cin >> N >> M;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin >> city[i][j];
			if (city[i][j] == 1) {
				vecHome.push_back(make_pair(i, j));
			}
			else if (city[i][j] == 2) {
				vecChick.push_back(make_pair(i, j));
			}
		}
	}
	vector<int> vecComb(vecChick.size(), 0);
	vector<int> vecDist(vecHome.size(), 99999);
	fill(vecComb.begin(), vecComb.begin() + M, 1);

	do {
		for (int k = 0; k < vecChick.size(); k++) {
			if (vecComb[k] == 1) {
				for (int q = 0; q < vecHome.size(); q++) {
					tmpDist = abs(vecChick[k].Y - vecHome[q].Y)
						+ abs(vecChick[k].X - vecHome[q].X);
					if (vecDist[q] > tmpDist) {
						vecDist[q] = tmpDist;
					}
				}
			}
		}

		// 해당 조합에서의 치킨 거리를 구합니다.
		for (int iter : vecDist) {
			tmpChickDist += iter;
		}

		if (chickDist > tmpChickDist) {
			chickDist = tmpChickDist;
		}
		tmpChickDist = 0;
		fill(vecDist.begin(), vecDist.end(), 99999);
	} while (prev_permutation(vecComb.begin(), vecComb.end()));

	cout << chickDist;

	return 0;
}