<BarkingDog님의 알고리즘 강의로 풀게 된 문제>
https://www.acmicpc.net/problem/1149

거리의 집을 R, G, B 3가지 색 중 하나로 칠해야 하는데, 각 집을 칠하는 비용을 따로 줬을 때, 모든 집을 칠하는 최소 비용을 구하는 문제이다.

이것도 예전에 풀었었던 계단 오르기나 와인 마시는 문제처럼 DP로 풀어야 하는 문제이다. 


이전에 풀었던 계단 문제에서는 문제를 해결하는 데 시간이 좀 걸렸는데, 이건 그나마 좀 간단하게 잘 풀었던 것 같다. 다만 여전히 DP 특유의 점화식이나 "i번째 작업의 최솟값인데 뒤쪽은 반드시 특정 값으로 고정되어 있음"을 이해하지 못하는 경향이 있는 것 같다. 그 부분만 힌트를 얻었고, 나머지는 그냥 생각해서 풀었는데. 다음에는 좀 더 잘 풀 수 있겠지?


<코드 설명>
문제를 풀기 위해 DP식을 세울 때는 RGB를 위한 공간을 마련하고, 그걸 기준으로 문제를 풀면 훨씬 쉽게 접근할 수 있다. 즉 [(집 갯수)][3]같은 이중 배열을 만들어서 풀어야 한다.
그렇게 하면 paintArray[i][j]일 때, i는 i번째 집을, j는 색을 의미하게 된다
j의 경우 i번째 집을 j색으로 칠하는 것을 의미한다. 이 경우 색의 위치는 알아서 할당해주면 된다. 

그리고 점화식은... 0이 빨강, 1이 녹색, 2가 파랑이라고 가정하면
paintArray[i][0] 
	= min(paintArray[i - 1][1], paintArray[i - 1][2]) 
	+ i번째 집을 빨간색으로 칠할 때 드는 비용
정도로 만들 수 있다. 다른 색들은 min부분의 색을 바꿔가면서 구현해주면 된다. 어찌 보면 계단 때보다 이번 문제가 이중 배열로 구현한다는 점만 알면 훨씬 쉬운 것 같다. 실버1 문제 치고는 호다닥 성공했으니까.