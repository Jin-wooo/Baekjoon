<BarkingDog님의 알고리즘 강의로 풀게 된 문제>
https://www.acmicpc.net/problem/1182

이 파일을 작성하는 게 7월 25일이라 문제를 풀면서 했던 생각들은 아쉽게도 기억나질 않는다.
다만, 문제의 핵심 원리 정도는 기억이 난다.

이 문제는 어떻게 접근해야 할까?
사실 어디서 어떻게 원하는 값이 조합될지 모르는 거라서, 싹 다 돌려봐야 한다. 그래서 barkingdog님도 이 문제를 백트래킹 쪽에 할당해두셨다.

결론적으로는 죄다 돌려보는 게 맞는데, 어떻게 돌려보는 게 좋을까?
나도 그 방법으로 참 많이 고민해봤는데,
결론은 스위치처럼 돌리는 방식이었다.
누구는 켜고, 누구는 끄고....하는 식으로

예를 들어 문제의 기본 예제인 
5 0
-7 -3 -2 5 8
의 경우,

-7 -3 -2  5  8
 O  X  O  O  X
같은 식으로 순회하면 전부 다 돌아볼 수 있다.
이 부분은 처음 도는 걸 기준으로 -7을 포함한 재귀함수와 안 포함한 재귀함수, 이 두 개의 함수를 돌리고, 그 함수들은 또 -3을 포함한 재귀함수와 포함하지 않은 재귀함수로 나눠져서 돌아가고...를 반복하게 된다.

근데 이거 말만 들으면 분명 시간이 초과될 것 같다는 느낌이 드는데,
배열의 최대 길이가 끽해야 20이므로 2^20 = 백만 정도가 나온다.
호출이 백만 번이지 사실 스택에 쌓이는 재귀함수는 다해봐야 20정도니까...
시간 초과가 나지는 않는다 이 말이다.

이제 함수를 설명해볼까 한다.
pluser의 base condition은
n(주어진 배열 길이) == idx(진행된 배열의 idx)이다.
그렇다는 말은 배열 끝까지 가야만 종료 조건이 충족된다는 뜻이다.
이 글을 보는 누군가는
"어? 충족된 순간에 바로 cnt를 늘리는 게 맞지 않나?" 같은 생각을 하고 풀었을지도 모른다.
이게 안 되는 이유를 예시로 보여주자면

4 0
-1 1 -2 2

이 경우 {-1, 1}, {-2, 2}도 정답이겠지만
{-1, 1, -2, 2}도 정답이 될 수 있다.
그래서 중간에 끊어버리면 안 된다.
여기서 배열 끝을 종료 조건으로 보면, {-1, 1}은 {-1, 1}을 고르고 나머지를 고르지 않은 채로 배열 끝에 접근한 경우로 만들어줄 수 있다. 

base condition이 참이고 amt(pluser가 지금까지 가져 온 값의 합) == s(목표 값)이라면 cnt에 1을 추가한다. 목표에 도달한거니까. 
그리고 그냥 리턴한다. 딱히 돌려줄 값이 없음.

base condition을 지나친다면
pluser(idx + 1, amt);
pluser(idx + 1, amt + listy[idx]);
이 보일텐데, 말 그대로 이후에 돌려줄 amt를 listy[idx]를 더한 것과 냅둔 것으로 나누는 것이다. 이렇게 하면 이진 트리처럼 뻗어나가면서 탐색을 돌게 될 것이다.



이런 노력을 기울여가면서 열심히 풀었는데...
2년 전에 이미 푼 문제였다.
아쉽....




