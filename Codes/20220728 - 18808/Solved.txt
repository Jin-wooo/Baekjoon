<BarkingDog님의 알고리즘 강의로 풀게 된 문제>
https://www.acmicpc.net/problem/18808

이걸 푸는데 일주일이 걸렸다구요? ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
일주일? 일주일??????????????
ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
그냥 존123나 개그임 개그....



아무튼 간에 제정신으로 문제를 푼 게 아닌거같다.

이 문제로 확실히 깨달았는데, 나는 지금 단순히 집중력이 좀 모자란 걸로 끝나는 수준의 인간이 아닌 것 같다. 제정신이 아닌 것도 둘째치고, 일정 수준 이상의 복잡도를 가진 문제를 보면 집중력이 딸려서 아예 제대로 건드리지를 못한다. 머릿속에서 논리를 구상하다가 내가 내 논리에 지쳐서 나가떨어지는 느낌?

옳은 일은 절대 아니라고 본다.
아무 생각없이 시간을 보내면서 문제를 푼 것 같은데, 일주일은 진짜 상상도 못했다. 뭔가 잘못되었다. 뭔가 많이 많이 잘못되었다....
주말에는 사촌 집에 다녀와서 그런 것도 있겠지만은, 여튼 큰일이다.




문제는 간단히 말해서 스티커를 '''''정해진 규칙'''''대로 붙일 예정인데,
이 규칙에 따라 붙이면 몇 개의 칸이 채워지는지를 구하는 문제이다.
중요한 점은 이런 문제에서 왕왕 보이던서 '가장 많은 칸을 채우면 몇 칸?' 같은 부류의 문제가 아니라는 점이다. 나는 이렇게 이해해서 거의 구현에 3일 정도 쓴 것 같다. 이게 아니라는 것을, 그냥 하라는 대로만 하면 몇 칸이 나오나? 정도의 가벼운 질문이었다는 것을 오늘 오후에야 깨닫고 수정해서 제출했다.


즉, 나는 왜 이다지도 오래 걸린 것인가? - 하는 질문에 대한 답은
"지문을 제대로 이해를 못했기 때문"이다.

좀 더 다듬어서 말하자면, 이 문제에서 가장! 가장!!!! 중요한 '혜윤이가 스티커를 붙이는 방법'을 대충 보고 대충 이해했기 때문이라고 생각한다.

스티커를 붙이는 방법은 다음과 같다.

1. 스티커를 회전시키지 않고 모눈종이에서 떼어낸다.
2. 다른 스티커와 겹치거나 노트북을 벗어나지 않으면서 스티커를 붙일 수 있는 위치를 찾는다. 혜윤이는 노트북의 위쪽부터 스티커를 채워 나가려고 해서, 스티커를 붙일 수 있는 위치가 여러 곳 있다면 가장 위쪽의 위치를 선택한다. 가장 위쪽에 해당하는 위치도 여러 곳이 있다면 그중에서 가장 왼쪽의 위치를 선택한다.
3. 선택한 위치에 스티커를 붙인다. 만약 스티커를 붙일 수 있는 위치가 전혀 없어서 스티커를 붙이지 못했다면, 스티커를 시계 방향으로 90도 회전한 뒤 2번 과정을 반복한다.
4. 위의 과정을 네 번 반복해서 스티커를 0도, 90도, 180도, 270도 회전시켜 봤음에도 스티커를 붙이지 못했다면 해당 스티커를 붙이지 않고 버린다.

아마 다들 대충 어떤 소린지 이해가 갔을 텐데, 이걸 정확히, 그대로 구현하기만 하면 이 문제는 어렵지 않게 풀 수 있었을 것이다.
이해가 안 가는 사람들을 위해서 첨언을 하자면,
1. 스티커를 떼서 붙이는데, 
2. 한번 떼면 그 모양 그대로 최대한 왼쪽 위(위 우선)로 붙이고
3. 못붙이면 돌려서 붙이고
4. 그래도 답이 없으면 그냥 버린다.

가 된다. 즉, 절대로 붙인 스티커를 다시 떼서 각을 재보지 않는다.
이 부분이 핵심이다. 한 번 붙였으면 그렇게 붙이는 방법이 좋은 방법이 아닐지라도 그냥 그대로 가는 거다. 이 문제는 가장 효율적인 스티커 붙이는 방법을 찾는 게 아니라 그냥 정해진 방법대로 했을 때 노트북을 차지하는 칸 수를 제출하는 문제니까.


여기서 나는 백트래킹 뽕에 찬건지 뭔지는 몰라도 이 문제가 스티커를 최대한 빈틈없게 붙일 수 있는 최적의 방법을 찾아보라는 의미로 이해하고 코드를 짜버렸다. 그 코드가 바로 Wrong Code.txt에 있는 파일이다.

저 코드는 스티커와 노트북이 주어졌을 때, 가장 효율적으로 스티커를 붙이면 몇 칸을 차지하는건지 제시해주는 코드이다. 그리고 저 코드는 8번 예제에서 너무 효율적인 스티커 붙이기 기법을 제시해버린 나머지 정답이 38로 나온다. 확인해본 결과 1, 2, 3, 6번 스티커를 붙이면 가장 빈틈없이 붙일 수 있게 된다.
이 예제가 없었으면 아마 내가 얼마나 큰 실수를 했던 건지 몰랐겠지?





이 문제가 '주어진 설명서를 충실히 이행하기'라는 걸 알았다면,
우리는 이 설명서를 이행하기 위한 문제를 몇 가지 해결해야 한다.

1. 스티커가 겹치거나 노트북을 벗어나지 않게 감시하기
2. 가장 위쪽, 가장 왼쪽을 고르기
3. (중요) 스티커 회전시키기

1은 if문으로 위치를 잘 보면서 가면 된다. 가로와 세로의 크기가 초과하지는 않는지, 지금 붙이는 위치에서 스티커 최대 사이즈를 더하면 넘어가지는 않는지...그런 걸 살펴보면 된다. 여기서 걸리면 스티커를 버리지 않고 돌려줘야 한다. 꼭! 돌리세요!

2는 제일 쉽다. 그냥 for문 2개에 시작점을 0으로 맞추고 탐색하면 자동으로 그렇게 만들어준다.
3은.... 이게 문제인데, 사실 이거 생각해내는 게 좀 힘들었다. 한 번 실행할 때마다 90도씩 돌아갈 수 있도록 만들어줘야 한다는 건데...
이건 글로 적어서 보지 않으면 쉽게 이해하기 힘든 부분이라고 생각한다.

공부를 할 때는 이걸 직접 해 보면서 원리를 빠르게 깨우치는 편이 좋겠지만, 그게 아니거나 급하다면 이 부분을 편하게 넘길 수 있도록 원리를 적어두겠다.

원본이 
1000
1100
1111
원본이 계단 비슷하게 생긴 이 스티커의 좌표를 순서대로 적어보자면
00 10 11 20 21 22 23 (C++ 배열 기준이라 yx 순으로 작성함)
이 나온다. 이걸 회전한 것과 회전했을 때의 가로, 세로 길이는

 000 : 00 10 11 20 21 22 23 (3, 4) 
 090 : 02 01 11 00 10 20 30 (4, 3) 
 180 : 23 13 12 03 02 01 00 (3, 4) 
 270 : 30 31 21 32 22 12 02 (4, 3) 

이런 느낌으로 나온다.
숫자를 자세히 보면, 규칙이 보일 것이다.
000 -> 090의 00 -> 02를 보면 000의 x축이 090의 y축으로 이동해있고,






이번 문제에서 한 실수
1. 문제조차 제대로 읽지 않고 일단 코딩부터 해버렸음.
2. 백트래킹에 미쳐서 재귀함수로 코드를 짜버렸음.

그래도 이번 문제 하나로 코드 두 가지를 짜보았으니까 그럭저럭 이득을 본 게 아닌가 하는 생각은 든다. 그냥 그렇게 생각하고 위안을 얻기로 했다...


