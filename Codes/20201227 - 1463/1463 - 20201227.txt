#include <stdio.h>
#include <iostream>
#include <string>
#include <queue>

using namespace std;

struct numberX // 숫자와 그 수가 계산된 횟수를 기록하는 구조체
{
	int num;
	int numCalculated;
};

int main()
{
	queue<numberX> XQueue;
	numberX numQues, numTar, numPush;

	int numCalcVal = 0; // 계산 몇번 했는지 기록하는...답안 제출용 변수
	
	// Queue에 넣을 숫자 초기화
	numPush.num = 0;
	numPush.numCalculated = 0;

	// 입력값 받아오고, 입력용 numberX 초기화
	cin >> numQues.num;
	numQues.numCalculated = 0;

	// 그리고 Queue에 삽입
	XQueue.push(numQues);

	while (!XQueue.empty()) {
		numTar = XQueue.front();
		XQueue.pop();

		// 2나 3이 발견되는 즉시 값을 계산하고 탈출한다.
		if (numTar.num == 2 || numTar.num == 3) {
			numCalcVal = numTar.numCalculated + 1;
			break;
		}
		// 1 전용. 사실 2, 3을 없애고 이걸 써도 계산값이 그렇게까지 많아지진 않았을 듯
		// 근데 이게 없어서 2와 3을 다시 나눠서 계산한다면, 그만큼 계산량이 어마어마하게 늘어난다.
		// 차라리 이게 속도면에서는 나을듯.
		else if (numTar.num == 1) {
			numCalcVal = numTar.numCalculated;
			break;
		}
		else {
			// 3으로 나눠지면 3으로 나누고 그 값을 Queue에 넣는다.
			if (numTar.num % 3 == 0) {
				numPush.num = numTar.num / 3;
				numPush.numCalculated = numTar.numCalculated + 1;
				XQueue.push(numPush);
			}
			// 2도 나눠지면 나누고 Queue에 넣는다.
			if (numTar.num % 2 == 0) {
				numPush.num = numTar.num / 2;
				numPush.numCalculated = numTar.numCalculated + 1;
				XQueue.push(numPush);
			}
			// 1 빼는건 안되는 값이 없을테니(안될수도 있는 1은 이미 앞에서 거름)
			// 그냥 늘 계산하면 됨.
			numPush.num = numTar.num - 1;
			numPush.numCalculated = numTar.numCalculated + 1;
			XQueue.push(numPush);
		}
	}
	cout << numCalcVal << endl;

	return 0;
}